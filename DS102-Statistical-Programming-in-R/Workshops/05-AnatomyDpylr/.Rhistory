print("Hello World!!")
print("Hello World!!")
print("Good evening!!")
#My first code in R
help("print")
help("print")
help("datasets")
var_x <- 2
var_y <- 3
var_z = 4
7 -> var_a
var_str1 <- "name is neha."
var_str2 <- "and what is yours?"
paste(var_str1,var_str2)
var_str1 <- "my name is neha."
var_str2 <- "and what is yours?"
paste(var_str1,var_str2)
print(var_str1, var_str2)
var_str3 <- paste(var_str1,var_str2)
var_str3
print(var_str3)
pi * 2.54^2
.834^2
x <- 154.8
mu <- 159.0
sigma <- 4.9
x - mu / sigma
(x - mu) / sigma
sqrt(6.28)
#Function to calculate 11 table
fn11times = funtion(numvar){(numvar * 11)}
#Function to calculate 11 table
fn11times = funtion(numvar){
(numvar * 11)
}
#Function to calculate 11 table
fn11times <- funtion(numvar){
(numvar * 11)
}
fn11times <- funtion(numvar){
(numvar * 11)
(numVar * 11)
#Function to calculate 11 table
fn11times <- funtion(numVar){
(numVar * 11)
}
#Function to calculate 11 table
fn11times <- funtion(numVar){
numVar * 11
}
fn11times <- funtion(numVar){
(numVar * 11)
}
fn11times(2)
fn11times <- funtion(num_Var){
(num_Var * 11)
}
fn11times <- funtion(TsTb){
(TsTb * 11)
}
fn11times <- funtion(TsTb){
(TsTb * 11)
}
TsptoTbsp <- function(abc){
(abc * 11)
}
fn11table <- function(nomult){
(nomult * 11)
}
fn11table(2)
vec_manual <- c(2,5,7,1)
vec_asc <- 5:9
vec_desc <- 11:3
for (n in 1:6){
print(n, " ")
}
for (n in 1:6){
print(n)
}
for (n in 1:6){
print(n)
cat(n, " ", n^2, "\n")
}
for (n in 1:6){
cat("Square of", n, " is ", n^2, "\n")
}
for (n in vec_asc){
cat("Square of", n, " is ", n^2, "\n")
}
for (n in vec_manual){
cat("Square of", n, " is ", n^2, "\n")
}
fToc <- function(Tinf){
(Tinf - 32) * 5 / 9
}
tempInF <- c(-20, 10, 20, 40, 35)
for(x in tempInF){
cat(x, " in degree Celcius is" , fToc(x))
}
for(x in tempInF){
cat(x, " in degree Celcius is" , fToc(x) ,"\n")
}
diam <- function(sphWeight){
(2/2.54)*(sphWeight/(.92*(4/3)*pi()))^(1/3)
}
vec.weight <- c(0.96, 1.51, 2.17, 3.85, 4.45, 6.02)
#Program to calculate diameter of a sphere
# diam() function to calculate daimeter
diam <- function(sphWeight){
(2/2.54)*(sphWeight/(.92*(4/3)*pi()))^(1/3)
}
# for loop to print the diameter of the sphere for the given vector
vec.weight <- c(0.96, 1.51, 2.17, 3.85, 4.45, 6.02)
for(Wt in vec.weight){
diamVal = diam(Wt)
cat("The diameter of sphere is: ", diamVal, " for sphere weight: ",Wt, "\n")
}
#Program to calculate diameter of a sphere
# diam() function to calculate daimeter
diam <- function(sphWeight){
(2/2.54)*(sphWeight/(.92*(4/3) *(22/7)))^(1/3)
}
# for loop to print the diameter of the sphere for the given vector
vec.weight <- c(0.96, 1.51, 2.17, 3.85, 4.45, 6.02)
for(Wt in vec.weight){
diamVal = diam(Wt)
cat("The diameter of sphere is: ", diamVal, " for sphere weight: ",Wt, "\n")
}
help(pi)
#Program to calculate diameter of a sphere
# diam() function to calculate diameter
diam <- function(sphWeight){
(2/2.54)*(sphWeight/(.92*(4/3) * pi ))^(1/3)
}
# for loop to print the diameter of the sphere for the given vector
vec.weight <- c(0.96, 1.51, 2.17, 3.85, 4.45, 6.02)
for(Wt in vec.weight){
diamVal = diam(Wt)
cat("The diameter of sphere is: ", diamVal, " for sphere weight: ",Wt, "\n")
}
vec1 <- c(5,10,3,9,8)
vec2 <- seq(2,6, by = 2)
vec2[2]
vec2 <- seq(1,10, length.out = 5)
100:1
vec3 <- vec1() * 2
vec3
vec3 <- vec1 * 2
vec3
vec4 <- vec1 / vec2 * vec2
vec 4
vec4 <- vec1 / vec2
vec4
length(vec4)
vec_greater_than1 <- vec4[vec4 > 1]
vec_smaller_than1 <- vec4[vec4 <= 1]
library(datasets)
view(faithful)
View(faithful)
eruptions.time <- faithful$eruptions
mean(eruptions.time)
median(eruptions.time)
min(eruptions.time)
max(eruptions.time)
var(eruptions.time)
sd(eruptions.time)
summary(eruptions.time)
count(eruptions.time)
length(eruptions.time)
sort(eruptions.time)
sort(eruptions.time, descending = TRUE)
sort(eruptions.time, decreasing = TRUE)
wait.time <- eruptions.time
mean(wait.time)
wait.times <- faithful$waiting
mean(wait.times)
median(wait.times)
min(wait.times)
max(wait.times)
eruptions.times <- faithful$eruptions
short <- eruptions.times[eruptions.times <= 3]
long <- eruptions.times[eruptions.times > 3]
length(short)
length(long)
print("Elements in the vector short : ", length(short))
print(Elements in the vector short : , length(short))
print("Elements in the vector short : " length(short))
print("Elements in the vector short : ", length(short))
print(length(short), "Elements in the vector short : ")
# How many elements are in the vector short?
length(short)
# How many elements are in the vector long?
length(long)
mean(short)
sd(short)
# Mean and sd of long
mean(long)
sd(long)
# Old Faithful eruption times
eruptions.times <- faithful$eruptions
short <- eruptions.times[eruptions.times <= 3] # eruptions less than equal to 3 minutes
long <- eruptions.times[eruptions.times > 3] # eruptions greater than 3 minutes
# How many elements are in the vector short?
length(short)
# How many elements are in the vector long?
length(long)
# Mean and sd of short
mean(short)
sd(short)
# Mean and sd of long
mean(long)
sd(long)
#Program to calculate diameter of a sphere
# diam() function to calculate diameter
diam <- function(sphWeight){
(2/2.54)*(sphWeight/(.92*(4/3) * pi ))^(1/3)
}
# for loop to print the diameter of the sphere for the given vector
vec.weight <- c(0.96, 1.51, 2.17, 3.85, 4.45, 6.02)
for(Wt in vec.weight){
diamVal = diam(Wt)
cat("The diameter of sphere is: ", diamVal, " for sphere weight: ",Wt, "\n")
}
install.packages("ggplot2")
install.packages("datasets")
install.packages("readxl")
install.packages("dplyr")
install.packages("PerformanceAnalytics")
install.packages("corrplot")
install.packages("gapminder")
install.packages("gridextra")
install.packages("Ecdat")
install.packages("corpcor")
install.packages("GPArotation")
install.packages("psych")
install.packages("IDPmisc")
install.packages("lattice")
install.packages("treetop")
install.packages("scales")
install.packages("rcompanion")
install.packages("gmodels")
install.packages("car")
install.packages("caret")
install.packages("gvlma")
install.packages("predictmeans")
install.packages("caret")
install.packages("magrittr")
install.packages("tidyr")
install.packages("lmtest")
install.packages("popbio")
install.packages("e1071")
install.packages("data.table")
install.packages("effects")
install.packages("multcomp")
install.packages("mvnormtest")
library(ggplot2)
view(eruptioms)
View(eruptions)
View(oldfaithful)
View(faithful)
faith_wait <- ggplot(faithful,aes(x=waiting))
faith_wait+geom_histogram()
faith_wait+geom_histogram(10)
faith_wait+geom_histogram(10)
faith_wait+geom_histogram(binwidth = 10)
faith_wait+geom_histogram(binwidth = 20)
faith_wait+geom_histogram(binwidth = 30)
faith_wait+geom_histogram(binwidth = 5)
faith_wait+geom_histogram()
faith_wait+geom_histogram(binwidth = 10)
faith_wait+geom_histogram(binwidth = 2)
faith_wait+geom_histogram(binwidth = 10)
faith_wait+geom_histogram(binwidth = 2)
faith_wait+geom_histogram(binwidth = 5)
ggtitle("Graph for Waiting time of Old Faithful Geyser")
faith_wait+geom_histogram(binwidth = 5) +
ggtitle("Graph for Waiting time of Old Faithful Geyser") +
xlab("Waititng Time") +
ylab("Minutes")
faith_wait+geom_histogram(binwidth = 5, fill = "red", color = "Golden") +
ggtitle("Graph for Waiting time of Old Faithful Geyser") +
xlab("Waititng Time") +
ylab("Minutes")
faith_wait+geom_histogram(binwidth = 5, fill = "red", color = "deepskyblue4") +
ggtitle("Graph for Waiting time of Old Faithful Geyser") +
xlab("Waititng Time") +
ylab("Minutes")
faith_waiterupt <- ggplot(faithful,aes(x= eruptions ))
faith_waiterupt + geom_histogram()
faith_waiterupt + geom_histogram(break = seq(1.4, 5.2, by = .2))
faith_waiterupt + geom_histogram(breaks = seq(1.4, 5.2, by = .2))
faith_waiterupt + geom_histogram(binwidth = .2)
faith_waiterupt + geom_histogram(breaks = seq(1.4, 5.2, by = .2))
view(cars)
View(cars)
head(cars)
d <- ggplot(cars, aes(x = " " , y = dist))
d <- ggplot(cars, aes(x = " " , y = dist))
d + geom_boxplot() + xlab("")
summary(cars)
summary(cars$dist)
56 - 26
26- 30
56 + 30
26- 30 * 1.5
56 + 30 * 1.5
ggplot(faithful, aes(sample = eruptions)) + geom_qq()
ggplot(faithful, aes(abc = eruptions)) + geom_qq()
ggplot(faithful, aes(sample = eruptions)) + geom_qq()
View(morley)
ggplot(morley, aes(sample = Speed)) + geom_qq()
View(rivers)
rr <- data.frame(rivers)
View(rr)
head(rr) # To view first 6 rows of data set rivers
ggplot(morley, aes(sample = Speed)) + geom_qq() # normally distributed
hist_Riv <- ggplot(rr, aes(x = rivers))
hist_Riv + geom_histogram()
hist_Riv + geom_histogram(binwidth = 100)
hist_Riv <- ggplot(rr, aes(x = rivers))
hist_Riv + geom_histogram(binwidth = 500)
hist_Riv + geom_histogram(break = seq(100, 4000, by = 500)
hist_Riv + geom_histogram(breaks = seq(100, 4000, by = 500))
hist_Riv + geom_histogram(breaks = seq(100, 4000, by = 100))
hist_Riv + geom_histogram(breaks = seq(100, 4000, by = 150))
hist_Riv + geom_histogram(breaks = seq(100, 4000, by = 250))
hist_Riv + geom_histogram(binwidth = 100)
hist_Riv + geom_histogram(breaks = seq(100, 4000, by = 250))
hist_Riv + geom_histogram(breaks = seq(100, 4000, by = 250), fill = "blue", color = "deepskyblue4")
hist_Riv + geom_histogram(breaks = seq(100, 4000, by = 250), fill = "blue", color = "deepskyblue4") +
ggtitle("Graph for length of Major Rivers in North America")
hist_Riv + geom_histogram(breaks = seq(100, 4000, by = 250), fill = "blue", color = "deepskyblue4") +
ggtitle("Graph of Major Rivers in North America") +
xlab("Length of rivers (In miles)") +
ylab("No. of rivers")
hist_Riv + geom_histogram(breaks = seq(100, 4000, by = 300), fill = "blue", color = "deepskyblue4") +
ggtitle("Graph of Major Rivers in North America") +
xlab("Length of rivers (in miles)") +
ylab("No. of rivers")
hist_Riv + geom_histogram(breaks = seq(100, 4000, by = 500), fill = "blue", color = "deepskyblue4") +
ggtitle("Graph of Major Rivers in North America") +
xlab("Length of rivers (in miles)") +
ylab("No. of rivers")
hist_Riv + geom_histogram(breaks = seq(100, 4000, by = 250), fill = "blue", color = "deepskyblue4") +
ggtitle("Graph of Major Rivers in North America") +
xlab("Length of rivers (in miles)") +
ylab("No. of rivers")
# Histogram using data set rivers.
View(rivers)
rr <- data.frame(rivers)
View(rr)
head(rr) # To view first 6 rows of data set rivers
hist_Riv <- ggplot(rr, aes(x = rivers))
hist_Riv + geom_histogram(breaks = seq(100, 4000, by = 250), fill = "blue", color = "deepskyblue4") +
ggtitle("Graph of Major Rivers in North America") +
xlab("Length of rivers (in miles)") +
ylab("No. of rivers")
boxP_Riv <- ggplot(rr, aes(x = " ", y = rivers))
boxP_Riv + geom_boxplot() + xlab("")
boxP_Riv + geom_boxplot() + xlab("") + ylab("Length of River(in miles") +
ggtitle("BoxPlot for major Rivers in North America")
summary(rr$rivers)
var_1st_Quart <- 310
var_3rd_Quart <- 680
var_IQR <- var_3rd_Quart - var_1st_Quart
var_IQR
low_outlier <- var_1st_Quart - var_IQR * 1.5
high_outlier <- var_3rd_Quart + var_IQR * 1.5
low_outlier
high_outlier
ggplot(rr, aes(sample = rivers)) + geom_qq()
ggplot(morley, aes(sample = Speed)) + geom_qq() # normally distributed
ggplot(faithful, aes(sample = eruptions)) + geom_qq()
ggplot(rr, aes(sample = rivers)) + geom_qq()
View(ToothGrowth)
ToothGrowth[(3:5),]
ToothGrowth[3,(2)]
ToothGrowth[3,(1,2:3)]
ToothGrowth[(3),(2:3)]
ToothGrowth[(3),(1 , 2:3)]
ToothGrowth[(3), c(1,2:3)]
ToothGrowth[(3), c(1,2,3)]
ToothGrowth[(3), c(1,2,3)]
head(ToothGrowth)
tail(ToothGrowth)
ToothGrowth[which(ToothGrowth$dose == 1), c(1,3)]
ToothGrowth[which(ToothGrowth$dose == 1), c(1,2,3)]
View(mtcars)
help("mtcars")
colnames(mtcars)
summary(mtcars)
setwd("~/Downloads")
setwd("~/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R")
my_pets <- read.csv("PetsCSV.csv")
my_pets <- read.csv("PetsCSV.csv")
PetsCSV <- read.table("~/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R/RExampleCode/PetsCSV.numbers", header=TRUE, quote="\"")
View(PetsCSV)
my_pets <- read.csv("Pets.csv")
library(readxl)
Pets <- read_excel("Pets.xlsx")
View(Pets)
PetsCSV <- read.csv2("~/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R/PetsCSV.csv", sep="", stringsAsFactors=TRUE)
View(PetsCSV)
View(PetsCSV)
PetsCSV <- read.csv("~/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R/PetsCSV.csv", stringsAsFactors=TRUE)
View(PetsCSV)
PetsCSV <- read.csv("~/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R/PetsCSV.csv", stringsAsFactors=TRUE)
View(PetsCSV)
library(readxl)
my_petsExcel <- read_excel("Pets.xlsx")
View(my_petsExcel)
read.xlsx("Pets.xlxs")
library(dplyr)
library("dplyr")
install.packages("dplyr")
library("dplyr")
View(student.mat)
View(my_pets)
my_pets <- read.csv("PetsCSV.csv")
View(my_pets)
filter(my_pets, animal == "goat")
filter(my_pets, Animal == "goat")
filter(my_pets, Animal == "Goat")
filter(my_pets, Animal %in% c("Goat", "Cat"))
filter(my_pets, Animal == "Goat", Weight > 2)
filter(my_pets, Animal == "Goat", Weight >= 2)
filter(my_pets, Animal == "Goat", Weight >35 )
filter(my_pets, Animal != "Gold Fish")
arrange(my_pets, Age)
arrange(my_pets,desc(Age))
my_pets %>% filter(Animal == "Goat") %>% arrange(Age)
setwd("~/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R/Workshops/05-AnatomyDpylr")
student.mat <- read.csv("~/Documents/GitHub/DS-Student-Resources/DS102-Statistical-Programming-in-R/Workshops/05-AnatomyDpylr/student-mat.csv", header=FALSE, stringsAsFactors=TRUE)
View(student.mat)
mutate(my_pets, Weight_kg = Weight/2.20462)

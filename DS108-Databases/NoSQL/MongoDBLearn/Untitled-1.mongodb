db.createCollection("appusers")
db.appusers.insertOne({_id:1,fistName:"Georgina",lastName:"Pumpernickel",
middleName:"Sasquatch",age:27,gender:"f"})

db.appusers.insertOne({_id:2,lastName:"Wilson", firstName:"Coderboy",
 age:18, favoriteColor:"blue"})

 db.appusers.find({})

 db.appusers.insertMany([{lastName: "Anstruther", firstName: "Jimmy", age: 21}, 
 {lastName: "Stevens", firstName: "Amelia", age: 28},
 {lastName: "Hopkins", firstName: "Fred", age: 35, favoriteColor: "Green"}])

 db.appusers.find({})

 db.movies.insertMany([{title: "The Shawshank Redemption", director: "Frank Darabont", yearReleased: 1994},
  {title: "The Dark Knight", director: "Christopher Nolan", yearReleased: 2008}, 
  {title: "It's a Wonderful Life", director: "Frank Capra", yearReleased: 1946}])

  db.movies.find({})

  /*Create three more users of your choosing, using the insertOne() query, 
  and add them to the appusers collection.
Include at least the firstName, lastName, and age fields. 
Feel free to also include any other fields you think would be useful 
data for an app user.*/ 

db.appusers.insertOne({_id:10,firstName:"John",lastName:"Hopkins",age:50})
db.appusers.insertOne({_id:11,firstName:"James",lastName:"Clear",age:40,occupation:"Author"})
db.appusers.insertOne({_id:12,firstName:"Warren",lastName:"Buffet",age:70,occupation:"Entrepreneur"})


/*Next, run a basic find() query to see 
all of your documents within your database through the Mongo Shell. */

db.appusers.find({})

/*Insert five cars into this collection using the insertMany() query.

Include the following fields: make, model, color, year, fourDoor, and 
fourWheelDrive.
The last two fields, fourDoor and fourWheelDrive, s
hould be of type Boolean (i.e. true or false).*/

db.cars.insertMany(
    [{make:"Toyota",model:"Camry",color:"Silver",year:1998,fourDoor:true ,fourWheelDrive:true },
{ make:"Nissan",model:"Murano",color:"Grey",year:2000,fourDoor:false,fourWheelDrive:false },
{ make:"Audi", model:"r8", color:"White", year:2005,fourDoor:true,fourWheelDrive:true },
{ make:"Chevrolet",model:"Tahoe",color:"Red",year:1980,fourDoor:false,fourWheelDrive:false },
{ make:"Tesla",model:"Y",color:"White",year:2009,fourDoor:true ,fourWheelDrive:true }])

/*Once that is done, run a find() query to see 
your newly created documents. */

db.cars.find({})

db.appusers.find({_id:{$eq:1}})
db.appusers.find({_id:{$ne:1}})

db.inventory.insertMany([
{ item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A", price: 16.49, sale: true },
{ item: "spiral notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A", price: 4.79, sale: false },
{ item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D", price: 6.99, sale: true },
{ item: "day planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D", price: 25.29, sale: true },
{ item: "calendar", size: { h: 21.75, w: 17, uom: "in" }, status: "B", price: 5.99, sale: false },
{ item: "scissor", qty: 15, size: { h: 8, w: 4.25, uom: "in" }, status: "B", price: 11.59, sale: true },
{ item: "tape dispenser", qty: 5, size: { h: 3, w: 7, uom: "in" }, status: "A", price: 3.09, sale: true }
]);

db.inventory.find({qty:{$in:[5,15]}})

db.inventory.find({qty:{$nin:[5,15]}})

/**db.inventory.find( 
    { $and: [ { price: { $ne: 6.99 } }, { price: { $exists: true } } ] } )
 */

 db.inventory.find({$and:[{price:{$ne:6.99}},{price:{$exists: true}}]})

 db.inventory.find({$or : [{qty:{$lt:20}}, {price:16.49}]})

 db.inventory.find( {
$and : [
{ $or : [ { price : { $eq : 4.79 } }, { price : { $eq : 3.09 } } ] },
{ $or : [ { sale : true }, { qty : { $lt : 20 } } ] }
]
} )


db.inventory.find({price:{$not: {$gt:4.80}}})

db.inventory.find( {price:{$lte:4.80}}  )

db.inventory.find( { $nor: [ { price: { $gte : 5.99 } }, { sale: { $eq : true } } ] } )

// NoSQL-HandsOn

db.movies.insertMany([
        {_id: 1, title: "Wonder Woman", director: "Patty Jenkins", yearReleased: 2017, leadActors: ["Gal Gadot", "Chris Pine", "Robin Wright"], lengthInMin: 141, genre: ["Action", "Adventure", "Fantasy"], MPAA: "PG-13" },
        {_id: 2, title: "Cloud Atlas", director: "Tom Tykwer", yearReleased: 2012, leadActors: ["Tom Hanks", "Halle Berry", "Hugh Grant", "Jim Broadbent", "Jim Sturgess", "Hugo Weaving"], lengthInMin: 172, genre: ["Action", "Drama", "Mystery"], MPAA: "R" },
        {_id: 3, title: "Pan's Labyrinth", director: "Guillermo del Torro", yearReleased: 2006, leadActors: ["Ivana Baquero", "Ariadna Gil", "Sergi Lopez"], lengthInMin: 118, genre: ["Drama", "Fantasy", "War", "Foreign"], MPAA: "R" },
        {_id: 4, title: "Gone With the Wind", director: "Victor Fleming", yearReleased: 1939, leadActors: ["Clark Gable", "Vivien Leigh", "Thomas Mitchell", "Olivia de Havilland", "Leslie Howard"], lengthInMin: 238, genre: ["Drama", "History", "Romance"], MPAA: "G" },
       {_id: 5, title: "Spaceballs", director: "Mel Brooks", yearReleased: 1987, leadActors: ["Mel Brooks", "John Candy", "Rick Moranis", "Bill Pullman", "Daphne Zuniga"], lengthInMin: 96, genre: ["Adventure", "Comedy", "Sci-fi"], MPAA: "PG" },
        {_id: 6, title: "Silence of the Lambs", director: "Jonathan Demme", yearReleased: 1991, leadActors: ["Jodie Foster", "Anthony Hopkins", "Anthony Heald"], lengthInMin: 118, genre: ["Crime", "Drama", "Thriller"], MPAA: "R" },
        {_id: 7, title: "American History X", director: "Tony Kaye", yearReleased: 1998, leadActors: ["Edward Norton", "Edward Furlong", "Beverly D'Angelo", "Ethan Suplee"], lengthInMin: 119, genre: ["Crime", "Drama"], MPAA: "R" },
       {_id: 8, title: "Psycho", director: "Alfred Hitchcock", yearReleased: 1960, leadActors: ["Anthony Perkins", "Vera Miles", "John Gavin", "Janet Leigh"], lengthInMin: 109, genre: ["Horror", "Mystery", "Thriller"], MPAA: "R" },
        {_id: 9, title: "The Pianist", director: "Roman Polanski", yearReleased: 2002, leadActors: ["Adrien Brody", "Emilia Fox", "Michal Zebrowski", "Ed Stoppard"], lengthInMin: 150, genre: ["Biography", "Drama", "Music"], MPAA: "R" },
        {_id: 10, title: "Gladiator", director: "Ridley Scott", yearReleased: 2000, leadActors: ["Russell Crowe", "Joaquin Phoenix", "Connie Nielsen", "Oliver Reed"], lengthInMin: 155, genre: ["Action", "Adventure", "Drama"], MPAA: "R" },
])

db.movies.find({})

// 1. Find all movies that are longer than 2 hours

db.movies.find({ lengthInMin : { $gt : 120 } })

//2. Find all movies that do not have Tom Hanks as a lead actor.

db.movies.find({ leadActors : { $in:["Tom Hanks"] } })

//3.Find all movies that were directed by Mel Brooks.

db.movies.find({ director : "Mel Brooks"})

//4. Find all movies that are not considered Drama.

db.movies.find({ genre : {$nin:["Drama"]} })


//5. Find all movies that are longer than 90 minutes but less than 2 hours

db.movies.find(
    { $and:[
        {lengthInMin:{ $gt : 90 }
        },
        {lengthInMin:{$lt : 120}
        }
        ]
        })


// 6. Find all movies that are considered Action or Adventure and
// return only the title of the movie.

db.movies.find({ genre : { $in:["Action", "Adventure"] } },
{_id:0,director:0,yearReleased:0,leadActors:0, lengthInMin:0,genre:0,MPAA:0})

// OR //

db.movies.find({ genre : { $in:["Action", "Adventure"] } },
{_id:0,  title:1})


/* The company you work for is having a movie night for all employees,
 and they are trying to find the perfect movie for movie night. 
 The problem is, so many people have different opinions, and they want to make everyone happy.
Sally has very poor eyesight so cannot watch any foreign films but likes comedies and dramas. 
Robert hates Jodie Foster and refuses to watch any movies with her in it,
 but likes comedies and horror films. Stewart has somewhere to be after movie night, 
 so he can't watch a movie longer than 2 hours; he prefers thrillers and comedies.
After running your query(ies), what movie is going to be played at movie night?*/

// $nin foreign , Jodie Foster , >2 
// $in comedies OR horror , drama , thrillers



db.movies.find({$and:
    [
        {$and:
            [
                {
                    genre : {$in:["Comedy", "Drama"]}
                }, 
                {
                    genre : {$ne : "Foreign"}
                }
                
            ]
            
        },
        {$and:
            [
                {
                    genre : {$in:["Comedy", "Horror"]}
                },
                {
                    leadActors : {$ne: "Jodie Foster"}
                }
                
            ]
        }, 
        {$and:
            [
                {
                    genre : {$in:["Comedy", "Thriller"]}
                }, 
                {
                    lengthInMin : {$lte : 120}
                }
                
            ]
            
        }

    ]})



db.movies.find({$and:
    [
       
                {
                    genre : {$in:["Comedy", "Drama"]}
                }, 
                {
                    genre : {$ne : "Foreign"}
                }
           ,
        
                {
                    genre : {$in:["Comedy", "Horror"]}
                },
                {
                    leadActors : {$ne: "Jodie Foster"}
                }
                
            , 
        
                {
                    genre : {$in:["Comedy", "Thriller"]}
                }, 
                {
                    lengthInMin : {$lte : 120}
                }
                

    ]})



db.appusers.updateOne(
        {"_id":50},
        {$set:{"middleName":"ABCDEFIns"}},
        {upsert:true}
    )

db.appusers.find({"_id":50})

// Using update as updateOne /updateMany , by command multi
// db.[collection].update( {filter}, {update}, {upsert : true/false, multi: true/false})

db.appusers.find({firstName : "PQR"})

db.appusers.updateOne({"firstName" : "PQR"}, 
{ $set : { "middleName" : "Cole", "lastName" : "XYZ"}}, { upsert : true})

db.appusers.find({firstName : "Coderboy"})

db.inventory.updateMany({"status" : "A"}, {$mul:{qty : 2, "size.h" : .5}})
db.inventory.find({status : "A"})


db.inventory.updateMany({"item" : "journal"}, {$set:{"status" : "AddedNew"}},{upsert:true})
db.inventory.find({item :"tape dispenser"})


db.inventory.updateMany({}, {$rename:{"qty":"quantity"}})
db.inventory.updateMany({}, {$rename:{"size.height":"size.h"}})

db.inventory.updateMany({}, {$set:{"size.w" : 3}},{upsert:true})

db.inventory.find({})


db.inventory.updateOne({"item" :"scissor"}, {$set:{"size.w" : 4.25}},{upsert:true})

db.inventory.updateOne({"item" :"scissor"}, {$unset:{"width" : ""}},{upsert:true})


db.appusers.replaceOne(
  { _id: 2 },
  { lastName: 'Beck', firstName: 'Rupert', age: 19, favoriteColor: 'green' }
)

db.appusers.find({_id : 2})


db.scores.insertMany( [ { "_id" : 1521, "team" : "Fearful Mallards", "score" : 25000 },
{ "_id" : 2231, "team" : "Tactful Mooses", "score" : 23500 },
{ "_id" : 4511, "team" : "Aquatic Ponies", "score" : 19250 },
{ "_id" : 5331, "team" : "Cuddly Zebras", "score" : 15235 },
{ "_id" : 3412, "team" : "Garrulous Bears", "score" : 22300 } ] )

db.scores.findOneAndReplace(
  { score: { $lt: 20000 } },
  { team: 'Observant Badgers', score: 20000 }
);

db.scores.find({_id : 5331})


// NoSQL-HandsOn3
//1. Update the item of journal to have a height of 16.

db.inventory.updateOne(
    {"item":"journal"},{$set:{"size.h" : 16}}
)

//2. Update all items with a status of D to have a quantity of 50.

db.inventory.updateMany(
    {"status" : "D"}, {$set:{"quantity" : 50}}
)

//3. Update the item paper to include a field rating 
//that has the value of 4 stars and change its status to A.

db.inventory.updateMany(
    {"item" : "paper"}, {$set:{"rating" : "4 stars", "status" : "A"}},
    {upsert : true})
 
//4.Update all items to change the h and w fields 
// to be height and width.

db.inventory.updateMany({}, 
{$rename:{"size.h":"size.height", "size.w":"size.width"}})

//5.Update the item spiral notebook so that the 
//height and width is incremented by 2.

db.inventory.updateMany({"item":"spiral notebook"}, 
{$inc:{"size.height":2, "size.width":2}})

db.inventory.find({"item":{$in : ["spiral notebook","day planner"]}})
//6. Update the items paper and day planner to 
// multiply the height by 3.

db.inventory.updateMany({"item":{$in : ["spiral notebook","day planner"]}}, 
{$mul:{"size.height": 3}})

db.inventory.insertMany([
  {
    item: 'sticky note pads',
    size: { height: 8.9, width: 9, uom: 'cm' },
    status: 'B',
    quantity: 5
  },
  {
    item: 'pens',
    size: { height: 12, width: 1.3, uom: 'cm' },
    status: 'A',
    quantity: 4
  },
  {
    item: 'pencils',
    size: { height: 13, width: 1.4, uom: 'cm' },
    status: 'D',
    quantity: 10
},
  {
    item: 'clipboard',
    size: { height: 13, width: 7, uom: 'in' },
    status: 'B',
    quantity: 2
  },
  {
    item: 'printer ink',
    size: { height: 2, width: 3, uom: 'in' },
    status: 'C',
    quantity: 2
  }
])


//They would like this to be reflected in the database as rating with two fields: 
//numberOfStars, and hasBeenRated


db.inventory.updateMany({},
    {$set:{"rating":{"numberOfStars" : "4 stars", "hasBeenRated" : true}}}, 
    {upsert : true}
)


// double the quantity of every product since the company is rapidly growing.

db.inventory.updateMany({}, {$mul:{"quantity": 3}})


// find all products that are sized using centimeters 
// and give them a status of "B".

db.inventory.updateMany({"size.uom" : "cm"}, {$set:{"status": "B"}})


db.cars.insertMany([
  {
    make: 'Hyundai',
    model: 'Santa Fe',
    price: 8000,
    year: 2003,
    used: true,
    color: 'Black'
  },
  {
    make: 'BMW',
    model: 'ALPINA B6 Gran Coupe',
    price: 124300,
    year: 2017,
    used: false,
    color: 'Mediterranean Blue Metallic'
  },
  {
    make: 'Subaru',
    model: 'Crosstrek 2.0i Premium',
    price: 22595,
    year: 2014,
    used: true,
    color: 'Sunshine Orange'
  },
  {
    make: 'Ford',
    model: 'F-350 XL',
    price: 33705,
    year: 2017,
    used: false,
    color: 'Race Red'
  },
  {
    make: 'Toyota',
    model: 'Acura MDX',
    price: 28800,
    year: 2014,
    used: true,
    color: 'Graphite Luster Metallic'
  },
  {
    make: 'Volkswagen',
    model: 'Jetta 1.4T S',
    price: 19495,
    year: 2018,
    used: false,
    color: 'Silk Blue Metallic'
  }
])

db.cars.deleteMany({used:true})
db.cars.find({price: {$gt:25000}})
db.cars.countDocuments()

db.cars.findOneAndDelete({ price: {$gt:25000} });

db.products.drop();

/// 

/*Start off by deleting the entire collection cars.
Take a screenshot of the query as well as the list of your collections in Atlas 
to be sure this collection has been deleted.*/

db.cars.drop()

db.cars.insertMany([
  {
    make: "Hyundai",
    model: "Santa Fe",
    price: 8000,
    year: 2003,
    used: true,
    color: "Black"
  },
  {
    make: "BMW",
    model: "ALPINA B6 Gran Coupe",
    price: 124300,
    year: 2017,
    used: false,
    color: "Mediterranean Blue Metallic"
  },
  {
    make: "Subaru",
    model: "Crosstrek 2.0i Premium",
    price: 22595,
    year: 2014,
    used: true,
    color: "Sunshine Orange"
  },
  {
    make: "Ford",
    model: "F-350 XL",
    price: 33705,
    year: 2017,
    used: false,
    color: "Race Red"
  },
  {
    make: "Toyota",
    model: "Acura MDX",
    price: 28800,
    year: 2014,
    used: true,
    color: "Graphite Luster Metallic"
  },
  {
    make: "BMW",
    model: "5 Series 535i Sedan",
    price: 18995,
    year: 2013,
    used: true,
    color: "Space Gray Metallic"
  },
  {
    make: "Ford",
    model: "Escape",
    price: 7480,
    year: 2011,
    used: true,
    color: "Sterling Grey Metallic"
  },
  {
    make: "Subaru",
    model: "Impreza",
    price: 18495,
    year: 2018,
    used: false,
    color: "Crimson Red Pearl"
  },
  {
    make: "Toyota",
    model: "Yaris",
    price: 15635,
    year: 2018,
    used: false,
    color: "Super White"
  },
  {
    make: "Honda",
    model: "Civic LX",
    price: 14999,
    year: 2016,
    used: true,
    color: "Crystal Black Pearl"
  },
  {
    make: "Volkswagen",
    model: "Jetta 1.4T S",
    price: 19495,
    year: 2018,
    used: false,
    color: "Silk Blue Metallic"
  }
]);


//Create an index on the price field.

db.cars.createIndex({price:1})

//Create an index on the non-used field for the cars collection.
db.cars.createIndex({used : 1}, {partialFilterExpression: { used: false }})

//Find and delete all documents with a year before 2012.
//Be sure to do a find with your filtering criteria first to be 
//sure you're about to delete the correct documents.

db.cars.find({year:{$lt:2012}})

db.cars.deleteMany({year:{$lt:2012}})

// Delete the first document that is a BMW.

db.cars.deleteOne({make:"BMW"})

// Drop the index created on the non-used cars created above.

db.cars.dropIndex({used : 1})

db.cars.getIndexes()

//Part 2

// The company would like to easily and efficiently 
// search through their cars using the "make" of the car. 

db.cars.createIndex({make : 1})

//Recently, they made the searching efficient using the price of the car, 
//but that is no longer needed since they will now be using the make of the vehicles. 
//Please reflect that in the database.

db.cars.dropIndex({price : 1})

//Also, the company has decided to no longer sell Volkswagens and 
//has already sold the last Volkswagen on the lot so they would like you 
//to reflect that in the database as well.

db.cars.deleteMany({make : "Volkswagen"})


db.cars.updateOne({},{$set: {"manufactured" : new Date(10/11/86)}})
db.cars.find({Name : { $eq:  "111"}} )

db.cars.find({Name : "A1b"})
db.cars.updateMany({"Position.Remote" : true}, {$set:{"Position.Remote" : "yes"}})

db.cars.updateMany({}, {$rename:{"Position.Remote" : "RemoteOutside"}})
db.cars.updateMany({Name : "A1b"},{$set:{"Bdate" : Date("12/12/20")}})
db.cars.insertMany([
{
  Name : "A1b",
  Birthday : "10/11/86",
  Address : "ssds",
  City : "ssd",
  State : "ssd",
  Position :{
    "Position Name" : "as",
    Remote : true,
    "Full Time" : false
  }
},
{
  Name : "B1c",
  Birthday : "10/11/86",
  Address : "ssds",
  City : "ssd",
  State : "ssd",
  Position :{
    "Position Name" : "as",
    Remote : true,
    "Full Time" : false
  }
},
{
  Name : "C1d",
  Birthday : "10/11/86",
  Address : "ssds",
  City : "ssd",
  State : "ssd",
  Position :{
    "Position Name" : "as",
    Remote : true,
    "Full Time" : false
  }
}
])

db.cars.find({Birthday : { $eq:"10/11/86" }})



// Lesson5HandsOn

// Part 1
// Create a new collection in Atlas named employees.
// Insert the data with following conditions.
/** 1.The Birthday field should have a data type of Date.
2. The Position Name, Remote, and Full Time fields should be 
within an embedded document called position.
3. Remote and Full Time fields should have boolean values. */

db.employees.insertMany([
{
  Name : "Alison Davidson",
  Birthday : "04/05/75",
  Address : "874 W. Oak Place",
  City : "Gary",
  State : "Indiana",
  position :
  {
    PositionName : "Customer Support",
    Remote : true,
    FullTime: true
  }
},
{
  Name : "Henry Chapelton",
  Birthday : "09/29/80",
  Address : "9324 E. Vista Way	",
  City : "Tempe",
  State : "Arizona",
  position :{
    PositionName : "Customer Support",
    Remote : false,
    FullTime: true
  }
},
{
  Name : "Alex Miller	",
  Birthday : "11/22/83",
  Address : "244 Price Road	",
  City : "Mesa",
  State : "Arizona",
  position :{
    PositionName : "Customer Support",
    Remote : false,
    FullTime: false
  }
},
{
  Name : "Carly Nielson	",
  Birthday : "08/04/87",
  Address : "678 W. Westward Road",
  City : "Phoenix",
  State : "Arizona",
  position :{
    PositionName : "Office Manager",
    Remote : false,
    FullTime: true
  }
},
{
  Name : "Tom Talbot",
  Birthday : "12/30/89",
  Address : "12 Oakland Way",
  City : "Chandler",
  State : "Arizona",
  position :{
    PositionName : "Inventory Manager",
    Remote : false,
    FullTime: true
  }
},
{
  Name : "Mary Crawley",
  Birthday : "07/06/80",
  Address : "1010 Granite Way",
  City : "Charlotte",
  State : "North Carolina",
  position :{
    PositionName : "Human Resources",
    Remote : true,
    FullTime: true
  }
},
{
  Name : "Daisy Baxter",
  Birthday : "09/09/87",
  Address : "990 E. 84th St.",
  City : "Tempe",
  State : "Arizona",
  position :{
    PositionName : "CEO",
    Remote : false,
    FullTime: true
  }
},
{
  Name : "William Coyle",
  Birthday : "10/11/91",
  Address : "944 W. 16th St.",
  City : "Phoenix",
  State : "Arizona",
  position :{
    PositionName : "Intern",
    Remote : false,
    FullTime: false
  }
},
{
  Name : "Edith Bates",
  Birthday : "07/28/90",
  Address : "7 E. 20th Pl.",
  City : "Chandler",
  State : "Arizona",
  position :{
    PositionName : "Customer Support",
    Remote : false,
    FullTime: true
  }
},
{
  Name : "Gwen Harding",
  Birthday : "10/11/86",
  Address : "234 W. 48th. St.",
  City : "Phoenix",
  State : "Arizona",
  position :{
    PositionName : "Office Assistent ",
    Remote : false,
    FullTime: true
  }
}
])

// The CEO decided that he no longer wants remote employees,
// so they have transferred the remote employees and they are 
// now living in Arizona.

/*
Alison Davidson now lives at 777 E. 1st St. # 120 Tempe, AZ
*/

db.employees.updateOne(
  {
    Name : "Alison Davidson"
  },
  {
    $set:{Address : "777 E. 1st St. # 120", 
    City : "Tempe", State :"Arizona", "position.Remote" : false}
  }
)

db.employees.find({Name : "Alison Davidson"})


/* 
Mary Crawley now lives at 8322 W. Vista Pl. Scottsdale, AZ. 
*/


db.employees.updateOne(
  {
    Name : "Mary Crawley"
  },
  {
    $set:{Address : "8322 W. Vista Pl.", 
    City : "Scottsdale", State :"Arizona", "position.Remote" : false}
  }
)

db.employees.find({Name : "Mary Crawley"})


// Since all employees now all live in Arizona, 
// there is no need to have a field named "state" within 
//this collection, so please remove it. 

db.employees.updateMany({},
  {
    $unset:{State : ""}
  }
)

/* Lastly, they would like very efficient searching using the "position" field */ 

db.employees.createIndex({position : 1})

db.employees.getIndexes()

//PART 2
/*
Please insert this data into a new collection named songs.
The artist, album, and releaseYear fields should be an embedded document named details.
Be sure that the songId and releaseYear fields have a type of number.
*/

db.songs.insertMany([
  {
    SongId : 1,
    Title : "Girls Just Want To Have Fun",
    Details :
    {
      Artist : "Cyndi Lauper",
      Album : "She's So Unusual",
      ReleaseYear : 1983
    }
  },
  {
    SongId : 2,
    Title : "Hips Don't Lie",
    Details :
    {
      Artist : "Shakira feat. Wyclef Jean",
      Album : "Oral Fixation Vol. 2",
      ReleaseYear : 2006
    }
  },
  {
    SongId : 3,
    Title : "Poker Face",
    Details :
    {
      Artist : "Lady Gaga",
      Album : "The Fame",
      ReleaseYear : 2008
    }
  },
  {
    SongId : 4,
    Title : "Wannabe",
    Details :
    {
      Artist : "Spice Girls",
      Album : "Spice",
      ReleaseYear : 1996
    }
  },
  {
    SongId : 5,
    Title : "California Gurls",
    Details :
    {
      Artist : "Katy Perry feat. Snoop Dogg",
      Album : "Teenage Dream",
      ReleaseYear : 2010
    }
  },
  {
    SongId : 6,
    Title : "Bye, Bye, Bye",
    Details :
    {
      Artist : "NSYNC",
      Album : "No Strings Attached",
      ReleaseYear : 2000
    }
  },
  {
    SongId : 7,
    Title : "I Will Always Love You",
    Details :
    {
      Artist : "Whitney Houston",
      Album : "I Will Always Love You: The Best of Whitney Houston",
      ReleaseYear : 2012
    }
  },
  {
    SongId : 8,
    Title : "Baby One More Time",
    Details :
    {
      Artist : "Britney Spears",
      Album : "Baby One More Time",
      ReleaseYear : 1999
    }
  },
  {
    SongId : 9,
    Title : "Vogue",
    Details :
    {
      Artist : "Madonna",
      Album : "I'm Breathless",
      ReleaseYear : 1990
    }
  },
  {
    SongId : 10,
    Title : "Rolling in the Deep",
    Details :
    {
      Artist : "Adele",
      Album : "21",
      ReleaseYear : 2011
    }
  },
  {
    SongId : 11,
    Title : "1234",
    Details :
    {
      Artist : "Feist",
      Album : "The Reminder",
      ReleaseYear : 2007
    }
  },
  {
    SongId : 12,
    Title : "Elastic Heart",
    Details :
    {
      Artist : "Sia",
      Album : "The Hunger Games: Catching Fire Soundtrack",
      ReleaseYear : 2015
    }
  },
  {
    SongId : 13,
    Title : "Oops! I Did It Again",
    Details :
    {
      Artist : "Britney Spears",
      Album : "Oops! I Did It Again",
      ReleaseYear : 2000
    }
  },
  {
    SongId : 14,
    Title : "Bad Romance",
    Details :
    {
      Artist : "Lady Gaga",
      Album : "The Fame Monster",
      ReleaseYear : 2009
    }
  },
  {
    SongId : 15,
    Title : "Lose Control",
    Details :
    {
      Artist : "Missy Elliot",
      Album : "The Cookbook",
      ReleaseYear : 2005
    }
  },
  {
    SongId : 16,
    Title : "U Can't Touch This",
    Details :
    {
      Artist : "MC Hammer",
      Album : "Please Hammer, Don't Hurt 'Em",
      ReleaseYear : 1990
    }
  },
  {
    SongId : 17,
    Title : "Thriller",
    Details :
    {
      Artist : "Michael Jackson",
      Album : "Thriller",
      ReleaseYear : 1982
    }
  },
  {
    SongId : 18,
    Title : "Single Ladies",
    Details :
    {
      Artist : "Beyonce",
      Album : "I am... Sasha Fierce",
      ReleaseYear : 2008
    }
  },
  {
    SongId : 19,
    Title : "Rhythm Nation",
    Details :
    {
      Artist : "Janet Jackson",
      Album : "Janet Jackson's Rhythm Nation 1814",
      ReleaseYear : 1989
    }
  }
])

// The title field needs to be renamed to songTitle,
// so it is clearer to the developers working with the data.

db.songs.updateMany({},{$rename : {Title : "songTitle"}})

// They would like to have the artist field to be outside the 
// details document but the album and releaseYear should stay within 
// that document.

db.songs.updateMany({},{$rename : {"Details.Artist" : "Artist"}})

db.songs.find({})